version: "3.8"

services:
  chatbot-service:
    build:
      context: ./chatbot-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DB_URL=postgresql://postgres:password@postgres:5432/chatbot
      - LLM_LM_STUDIO_URL=http://lm-studio:1234
      - SECURITY_SECRET_KEY=your-production-secret-key-change-this
      - SECURITY_CORS_ORIGINS=["http://localhost:3000", "https://your-app.com"]
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8000
      - SERVICE_DEBUG=false
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - chatbot-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=chatbot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - chatbot-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - chatbot-network

  lm-studio:
    image: lmstudio/lmstudio:latest
    ports:
      - "1234:1234"
    volumes:
      - ./models:/models
    environment:
      - MODEL_PATH=/models
    restart: unless-stopped
    networks:
      - chatbot-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - chatbot-service
    restart: unless-stopped
    networks:
      - chatbot-network

volumes:
  postgres_data:
  redis_data:

networks:
  chatbot-network:
    driver: bridge
